"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setURL = exports.renderShallowComponent = exports.mockComponent = exports.extractPropsFromWrapper = exports.expectShallowComponent = exports.expectMockToMatch = exports.expectComponent = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));
var _shallow = _interopRequireDefault(require("react-test-renderer/shallow"));
var _webpack = require("webpack");
var _excluded = ["children"]; // eslint-disable-line
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var expectComponent = function expectComponent(children, opts) {
  var component = _reactTestRenderer.default.create(children, opts);
  return expect(component);
};
exports.expectComponent = expectComponent;
var expectShallowComponent = function expectShallowComponent(children) {
  var component = renderShallowComponent(children);
  return expect(component);
};
exports.expectShallowComponent = expectShallowComponent;
var renderShallowComponent = function renderShallowComponent(children) {
  var renderer = new _shallow.default();
  renderer.render(children);
  return renderer.getRenderOutput();
};
exports.renderShallowComponent = renderShallowComponent;
var addDataToProps = function addDataToProps(props) {
  var returnedProps = {};
  Object.keys(props).forEach(function (k) {
    return returnedProps["data-".concat(k)] = props[k];
  });
  return returnedProps;
};
var removeDataFromProps = function removeDataFromProps(props) {
  var returnedProps = {};
  Object.keys(props).forEach(function (k) {
    return returnedProps[k.replace('data-', '')] = props[k];
  });
  return returnedProps;
};
var mockComponent = function mockComponent(type) {
  var domElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'div';
  return function (_ref) {
    var children = _ref.children,
      props = _objectWithoutProperties(_ref, _excluded);
    return /*#__PURE__*/_react.default.createElement(domElement, _objectSpread({
      'data-__type': type
    }, addDataToProps(props)), children);
  };
};
exports.mockComponent = mockComponent;
var extractPropsFromWrapper = function extractPropsFromWrapper(wrapper) {
  var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return removeDataFromProps(wrapper.find('div').at(index).props());
};

// Newer (> Jest v22) versions don't allow modification of location.href
// but can use `jsdom.reconfigure` when `jsdom` is exposed globally.
// https://www.npmjs.com/package/jest-environment-jsdom-global
exports.extractPropsFromWrapper = extractPropsFromWrapper;
var setURL = function setURL(url) {
  jsdom.reconfigure({
    url: url
  });
};
exports.setURL = setURL;
var expectMockToMatch = function expectMockToMatch(_ref2, numberOfCalls) {
  var mock = _ref2.mock;
  expect(mock.calls.length).toBe(numberOfCalls);
  for (var i = 0; i < numberOfCalls; i++) {
    expect(mock.calls[i]).toMatchSnapshot();
  }
};
exports.expectMockToMatch = expectMockToMatch;
