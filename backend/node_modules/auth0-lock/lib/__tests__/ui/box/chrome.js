"use strict";

var _react = _interopRequireDefault(require("react"));
var _immutable = _interopRequireDefault(require("immutable"));
var _testUtils = require("testUtils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var getComponent = function getComponent() {
  return require('ui/box/chrome').default;
};
jest.mock('ui/box/header', function () {
  return (0, _testUtils.mockComponent)('header');
});
jest.mock('ui/box/multisize_slide', function () {
  return (0, _testUtils.mockComponent)('div');
});
jest.mock('ui/box/global_message', function () {
  return (0, _testUtils.mockComponent)('div');
});
var mockEventRegister = {};
var triggerEvent = function triggerEvent(name) {
  if (name in mockEventRegister) {
    return mockEventRegister[name]();
  }
  throw new Error("Unknown event '".concat(name, "'"));
};
jest.mock('core/index', function () {
  return {
    handleEvent: jest.fn(function (_, event, fn) {
      mockEventRegister[event] = fn;
    }),
    ui: {
      forceAutoHeight: jest.fn().mockReturnValue(false)
    },
    id: jest.fn(function () {
      return 'lock';
    })
  };
});
var defaultProps = {
  contentComponent: (0, _testUtils.mockComponent)('content'),
  contentProps: {
    model: _immutable.default.fromJS({
      id: '__lock_id__'
    })
  },
  avatar: 'avatar',
  isSubmitting: false,
  logo: 'logo',
  primaryColor: 'white',
  screenName: 'screen name',
  classNames: '',
  color: 'black'
};
describe('Chrome', function () {
  var Chrome;
  beforeEach(function () {
    Chrome = getComponent();
    Chrome.prototype.getHeaderSize = jest.fn(function () {
      return 200;
    });
    mockEventRegister = {};
  });
  it('renders correctly with basic props', function () {
    (0, _testUtils.expectComponent)( /*#__PURE__*/_react.default.createElement(Chrome, defaultProps)).toMatchSnapshot();
  });
  it('renders correctly when there is a global message', function () {
    var props = _objectSpread(_objectSpread({}, defaultProps), {}, {
      error: 'There is an error'
    });
    (0, _testUtils.expectComponent)( /*#__PURE__*/_react.default.createElement(Chrome, props)).toMatchSnapshot();
  });
  it('renders correctly when there is a global success message', function () {
    var props = _objectSpread(_objectSpread({}, defaultProps), {}, {
      success: 'This is a success message'
    });
    (0, _testUtils.expectComponent)( /*#__PURE__*/_react.default.createElement(Chrome, props)).toMatchSnapshot();
  });
  it('renders correctly when there is a global information message', function () {
    var props = _objectSpread(_objectSpread({}, defaultProps), {}, {
      info: 'This is an information message'
    });
    (0, _testUtils.expectComponent)( /*#__PURE__*/_react.default.createElement(Chrome, props)).toMatchSnapshot();
  });
  it('can dislay all global messages together', function () {
    var props = _objectSpread(_objectSpread({}, defaultProps), {}, {
      info: 'This is an information message',
      success: 'This is a success message',
      error: 'There is an error'
    });
    (0, _testUtils.expectComponent)( /*#__PURE__*/_react.default.createElement(Chrome, props)).toMatchSnapshot();
  });
  it('adds the auto-height class when forceAutoHeight UI prop is true', function () {
    require('core/index').ui.forceAutoHeight.mockReturnValue(true);
    var props = _objectSpread(_objectSpread({}, defaultProps), {}, {
      info: 'This is an information message',
      success: 'This is a success message',
      error: 'There is an error'
    });
    (0, _testUtils.expectComponent)( /*#__PURE__*/_react.default.createElement(Chrome, props)).toMatchSnapshot();
  });
});
