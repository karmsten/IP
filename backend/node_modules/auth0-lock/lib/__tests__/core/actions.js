"use strict";

var _actions = require("../../core/actions");
var _testUtils = require("testUtils");
var l = _interopRequireWildcard(require("core/index"));
var _index2 = require("store/index");
var _web_api = _interopRequireDefault(require("../../core/web_api"));
var _immutable = require("immutable");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
jest.mock('../../core/web_api', function () {
  return {
    __esModule: true,
    default: {
      logIn: jest.fn(),
      checkSession: jest.fn()
    }
  };
});
jest.mock('store/index', function () {
  return _defineProperty({
    read: jest.fn(function () {
      return 'model';
    }),
    getEntity: 'getEntity',
    swap: jest.fn(),
    updateEntity: 'updateEntity'
  }, "read", jest.fn());
});
jest.mock('core/index');
describe('core.actions', function () {
  beforeEach(function () {
    jest.resetAllMocks();
    l.submitting.mockReturnValue(true);
    l.id.mockReturnValue('id');
    l.auth.params.mockReturnValue((0, _immutable.fromJS)({}));
  });
  describe('checkSession', function () {
    it('should set submitting on start', function () {
      (0, _actions.checkSession)('id', 'params', 'cb');
      var _require = require('store/index'),
        read = _require.read,
        swap = _require.swap;
      (0, _testUtils.expectMockToMatch)(read, 1);
      (0, _testUtils.expectMockToMatch)(swap, 1);
      swap.mock.calls[0][3]('model');
      (0, _testUtils.expectMockToMatch)(require('core/index').setSubmitting, 1);
    });
  });
  describe('logIn', function () {
    it('run the loggingIn hook', function (done) {
      var m = {};
      _index2.read.mockReturnValue(m);
      _web_api.default.logIn.mockImplementation(function (id, params, authParams, cb) {
        cb(null, {});
        done();
      });
      l.runHook.mockImplementation(function (m, hook, context, fn) {
        expect(hook).toEqual('loggingIn');
        fn();
      });
      (0, _actions.logIn)();
    });
    it('should display an error if one was thrown from the hook', function (done) {
      var m = {};
      _index2.read.mockReturnValue(m);
      var store = require('store/index');
      store.swap.mockImplementation(function (entity, n, id, fn, value, error) {
        if (error) {
          expect(error).toEqual('This is a hook error');
          done();
        }
      });
      l.loginErrorMessage.mockImplementation(function (m, error) {
        return error.description;
      });
      l.runHook.mockImplementation(function (m, hook, fn) {
        expect(hook).toEqual('loggingIn');
        throw {
          code: 'hook_error',
          description: 'This is a hook error'
        };
      });
      (0, _actions.logIn)();
    });
  });
});
