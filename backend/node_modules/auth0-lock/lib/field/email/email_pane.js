"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _email_input = _interopRequireDefault(require("../../ui/input/email_input"));
var c = _interopRequireWildcard(require("../index"));
var _index2 = require("../../store/index");
var l = _interopRequireWildcard(require("../../core/index"));
var _email = require("../email");
var _avatar = require("../../avatar");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
var EmailPane = /*#__PURE__*/function (_React$Component) {
  _inherits(EmailPane, _React$Component);
  var _super = _createSuper(EmailPane);
  function EmailPane() {
    _classCallCheck(this, EmailPane);
    return _super.apply(this, arguments);
  }
  _createClass(EmailPane, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
        lock = _this$props.lock,
        strictValidation = _this$props.strictValidation;
      if (l.ui.avatar(lock) && c.email(lock)) {
        (0, _avatar.requestAvatar)(l.id(lock), c.email(lock));
      }
      (0, _index2.swap)(_index2.updateEntity, 'lock', l.id(lock), _email.setEmail, c.email(lock), strictValidation);
    }
  }, {
    key: "handleChange",
    value: function handleChange(e) {
      var _this$props2 = this.props,
        lock = _this$props2.lock,
        strictValidation = _this$props2.strictValidation;
      if (l.ui.avatar(lock)) {
        (0, _avatar.debouncedRequestAvatar)(l.id(lock), e.target.value);
      }
      (0, _index2.swap)(_index2.updateEntity, 'lock', l.id(lock), _email.setEmail, e.target.value, strictValidation);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
        i18n = _this$props3.i18n,
        lock = _this$props3.lock,
        placeholder = _this$props3.placeholder,
        _this$props3$forceInv = _this$props3.forceInvalidVisibility,
        forceInvalidVisibility = _this$props3$forceInv === void 0 ? false : _this$props3$forceInv;
      var allowAutocomplete = l.ui.allowAutocomplete(lock);
      var field = c.getField(lock, 'email');
      var value = field.get('value', '');
      var valid = field.get('valid', true);

      // TODO: invalidErrorHint and blankErrorHint are deprecated.
      // They are kept for backwards compatibility in the code for the customers overwriting
      // them with languageDictionary. They can be removed in the next major release.
      var errMessage = value ? i18n.str('invalidErrorHint') || i18n.str('invalidEmailErrorHint') : i18n.str('blankErrorHint') || i18n.str('blankEmailErrorHint');
      var invalidHint = field.get('invalidHint') || errMessage;
      var isValid = (!forceInvalidVisibility || valid) && !c.isFieldVisiblyInvalid(lock, 'email');
      // Hide the error message for the blank email in Enterprise HRD only mode when the password field is hidden.
      isValid = forceInvalidVisibility && value === '' ? true : isValid;
      return /*#__PURE__*/_react.default.createElement(_email_input.default, {
        lockId: l.id(lock),
        value: value,
        invalidHint: invalidHint,
        isValid: isValid,
        onChange: this.handleChange.bind(this),
        placeholder: placeholder,
        autoComplete: allowAutocomplete,
        disabled: l.submitting(lock)
      });
    }
  }]);
  return EmailPane;
}(_react.default.Component);
exports.default = EmailPane;
EmailPane.propTypes = {
  i18n: _propTypes.default.object.isRequired,
  lock: _propTypes.default.object.isRequired,
  placeholder: _propTypes.default.string.isRequired,
  strictValidation: _propTypes.default.bool.isRequired
};
