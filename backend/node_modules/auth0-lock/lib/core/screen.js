"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var l = _interopRequireWildcard(require("./index"));
var i18n = _interopRequireWildcard(require("../i18n"));
var _index2 = require("../connection/database/index");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Screen = /*#__PURE__*/function () {
  function Screen(name) {
    _classCallCheck(this, Screen);
    this.name = name;
  }
  _createClass(Screen, [{
    key: "backHandler",
    value: function backHandler() {
      return null;
    }
  }, {
    key: "escHandler",
    value: function escHandler() {
      return null;
    }
  }, {
    key: "submitButtonLabel",
    value: function submitButtonLabel(m) {
      return i18n.str(m, ['submitLabel']);
    }
  }, {
    key: "isFirstScreen",
    value: function isFirstScreen(m) {
      var firstScreenName = (0, _index2.getInitialScreen)(m);
      var currentScreenNameParts = this.name.split('.');
      var currentScreenName = currentScreenNameParts[1] || currentScreenNameParts[0];

      // if signup and login is enabled, both are the first screen in this scenario and
      // neither of them should show the title
      if (currentScreenName === 'signUp' && (0, _index2.hasScreen)(m, 'login')) {
        return true;
      }
      var initialScreens = [firstScreenName, 'loading', 'lastLogin'];
      return initialScreens.indexOf(currentScreenName) !== -1;
    }
  }, {
    key: "getTitle",
    value: function getTitle(m) {
      //loading screen will never show a title
      if (this.name === 'loading') {
        return '';
      }
      return this.getScreenTitle(m) || i18n.str(m, 'title');
    }
  }, {
    key: "getScreenTitle",
    value: function getScreenTitle(m) {
      return i18n.str(m, 'title');
    }
  }, {
    key: "submitHandler",
    value: function submitHandler() {
      return null;
    }
  }, {
    key: "isSubmitDisabled",
    value: function isSubmitDisabled(m) {
      return false;
    }
  }, {
    key: "renderAuxiliaryPane",
    value: function renderAuxiliaryPane() {
      return null;
    }
  }, {
    key: "renderTabs",
    value: function renderTabs() {
      return false;
    }
  }, {
    key: "renderTerms",
    value: function renderTerms() {
      return null;
    }
  }]);
  return Screen;
}();
exports.default = Screen;
